# Set another default user than root for security reasons (only in production)
#SSL# user pyramid;

# As a thumb rule: One per CPU. If you are serving a large amount
# of static files, which requires blocking disk reads, you may want
# to increase this from the number of cpu_cores available on your
# system.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections

worker_processes 2;
daemon off;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections

worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing
  # your OS, and this is probably the point at where you hire people
  # who are smarter than you, this is *a lot* of requests.

  worker_connections  8000;
}

# Change these paths to somewhere that suits you!
pid ${buildout:directory}/var/nginx.pid;
error_log ${buildout:directory}/var/log/nginx.error.log;

http {
  # Set the mime-types via the mime.types external file
  include       nginx-mime.types;

  # XXX: Change on production
  ssl_certificate       ${nginx-config:certificate};
  ssl_certificate_key   ${nginx-config:certificate-key};


  map $scheme $server_https {
     default off;
     https on;
  }

  # And the fallback mime-type
  default_type  application/octet-stream;

  # Format for our log files
  log_format   main '[$time_local] - $remote_addr - $body_bytes_sent '
    '$request_method "$request" $status "$http_x_oauth_username"';

  # Click tracking!
  access_log   ${buildout:directory}/var/log/nginx.access.log  main;

  # ~2 seconds is often enough for HTML/CSS, but connections in
  # Nginx are cheap, so generally it's safe to increase it
  keepalive_timeout 20;

  # You usually want to serve static files with Nginx
  sendfile on;

  tcp_nopush on; # off may be better for Comet/long-poll stuff
  tcp_nodelay off; # on may be better for Comet/long-poll stuff

  # Enable Gzip:
  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 5;
  gzip_min_length 512;
  gzip_buffers 4 8k;
  gzip_proxied any;
  gzip_types
    # text/html is always compressed by HttpGzipModule
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It would be better to enable this in a location {} block for
  # a specific directory:
  # gzip_static on;

  gzip_disable        "MSIE [1-6]\.";
  gzip_vary           on;

  upstream max_server {
    server ${hosts:main}:${ports:max} fail_timeout=0;
  }

  upstream bigmax_server {
    server ${hosts:main}:${ports:bigmax} fail_timeout=0;
  }

  upstream maxtalk_server {
    server ${hosts:main}:${ports:maxtalk} fail_timeout=0;
  }

  #SSL# server {
  #SSL#     listen     80;
  #SSL#     server_name ${hosts:main};
  #SSL#     rewrite ^(.*)$ https://$server_name$1 last;
  #SSL# }

  # Servidor port ${ports:nginx}
  server {

    listen ${ports:nginx} default_server deferred;
    #SSL# ssl on;

    client_max_body_size 42k;

    # e.g. "localhost" to accept all connections, or "www.example.com"
    # to handle the requests for "example.com" (and www.example.com)
    # XXX: Change on production
    # server_name oauth.upc.edu;
    server_name ${hosts:main};

    # Path for static files
    root ${buildout:directory}/src/max/max/static/;

    #Specify a charset
    charset utf-8;

    # Custom 404 page
    error_page 404 /static/404.html;

    more_set_headers 'Access-Control-Allow-Origin: *';
    more_set_headers 'Access-Control-Allow-Credentials: true';
    more_set_headers 'Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS';
    more_set_headers 'Access-Control-Allow-Headers: X-Oauth-Token,X-Oauth-Username,X-Oauth-Scope,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';


    ###############################################################
    # Finally, the location of the application

    location / {

        # CORS PreFlight
        if ($request_method = 'OPTIONS') {

            # Not used by now
            # add_header 'Access-Control-Allow-Origin' '*';
            # add_header 'Access-Control-Allow-Credentials' 'true';
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            # add_header 'Access-Control-Allow-Headers' 'X-Oauth-Token,X-Oauth-Username,X-Oauth-Scope,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            # Tell client that this pre-flight info is valid for 20 days
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;

            return 200;
        }

        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    #For maxui development
    location ^~ /maxui-dev/ {
           alias   ${buildout:directory}/src/max.ui.js/;
       }


    location ~* ^/socket\.io {
        # FOR SSL --> # proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main};
        proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main}:${ports:nginx};
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass    http://maxtalk_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
     }

    location ~* ^/(?!contexts|people|activities|conversations|admin).*$ {
        # FOR SSL --> # proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main};
        proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main}:${ports:nginx};
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass    http://bigmax_server;
     }

    location @proxy_to_app {
        # FOR SSL --> # proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main};
        proxy_set_header X-Virtual-Host-URI $scheme://${hosts:main}:${ports:nginx};
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        proxy_pass   http://max_server;
    }

  }
#include oauth.conf;
}
