[buildout]

# Per compilar en Mountain Lion: ./bin/buildout -v -c ml-pcre.cfg

versions = versions

extends =
 twitter.cfg

parts =
#   Framework
    libevent
    gevent
    pyramid
    omelette
    test
    coverage

#   Nginx
    headers-module
    nginx-config
    nginx

#   Databases & messaging
    mongodb
    node
    redis
    redis_move
#   rabbitmq

    supervisor

#   Config files
    mongodb-indexes
    max-ini
    bigmax-ini
#    maxtalk-ini
    redis-conf
    node-conf
    maxsettings
    enable-ssl
    osiris-ini

eggs =
develop =

extensions = mr.developer
auto-checkout = *

#index = http://colladaverda.upc.edu/pypi
#allow-hosts = colladaverda.upc.edu

[test]
recipe = tranchitella.recipe.testrunner
eggs = max [test]
defaults = ['--auto-color', '--auto-progress']

[coverage]
recipe = tranchitella.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage-module', 'max', '--coverage-branch', '--auto-progress', '--coverage-html', '--coverage-xml']

[versions]
zc.buildout = 1.7.1

[sources]
max = git git@github.com:UPCnet/max.git branch=newpermissionmodel
bigmax = git git@github.com:UPCnet/bigmax.git branch=newpermissionmodel
maxclient = git git@github.com:UPCnet/maxclient.git
max.ui.js = git git@github.com:UPCnet/max.ui.js.git egg=false branch=conversations
maxtalk = git git@github.com:UPCnet/maxtalk.git
maxtalk.node = git git@github.com:UPCnet/maxtalk.node.git egg=false
max.scripts = git git@github.com:UPCnet/max.scripts
osiris = git git@github.com:sneridagh/osiris.git
#gevent-socketio = git git://github.com/abourget/gevent-socketio.git

[downloads]
nginx = http://nginx.org/download/nginx-1.4.1.tar.gz
rabbitmq = http://www.rabbitmq.com/releases/rabbitmq-server/v2.8.7/rabbitmq-server-2.8.7.tar.gz
headers-module = https://github.com/agentzh/headers-more-nginx-module/tarball/v0.20
pcre = http://downloads.sourceforge.net/project/pcre/pcre/8.32/pcre-8.32.tar.gz
libevent = https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz

[hosts]
main = localhost
redis = localhost
mongodb = localhost
oauth = https://oauth-test.upc.edu

[hosts-extra]
mongo = ${hosts:main}

[ports]
#to Enable SSL, set enable-ssl = true
#in [nginx-config] section and nginx = 443 just below
nginx = 8081
osiris = 6540
max = 6543
bigmax = 6544
maxtalk = 6545
redis = 6379
mongodb = 27017

[libevent]
recipe = zc.recipe.cmmi
url = ${downloads:libevent}

[gevent]
recipe = zc.recipe.egg:custom
include-dirs = ${libevent:location}/include
library-dirs = ${libevent:location}/lib

[gunicorn]
workers = 1
max-requests = 1000
timeout = 300

[pyramid]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    pyramid
    gunicorn
    gevent
    max
    bigmax
    maxclient
    maxtalk
    max.scripts
interpreter = python
development = true

[mongodb]
version = 2.4.3
recipe = rod.recipe.mongodb
darwin-32bit-url = http://downloads.mongodb.org/osx/mongodb-osx-i386-${mongodb:version}.tgz
darwin-64bit-url = http://downloads.mongodb.org/osx/mongodb-osx-x86_64-${mongodb:version}.tgz
linux2-32bit-url = http://downloads.mongodb.org/linux/mongodb-linux-i686-${mongodb:version}.tgz
linux2-64bit-url = http://downloads.mongodb.org/linux/mongodb-linux-x86_64-${mongodb:version}.tgz
linux3-32bit-url = http://downloads.mongodb.org/linux/mongodb-linux-i686-${mongodb:version}.tgz
linux3-64bit-url = http://downloads.mongodb.org/linux/mongodb-linux-x86_64-${mongodb:version}.tgz
script_name = start_master.sh
quiet=false
fork=false
logpath=${buildout:directory}/var/log/mongodb.log
dbpath=${buildout:directory}/var/data
directoryperdb=true
master=true
update=true

[mongodb-indexes]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = ${buildout:directory}/config/scripts/mongodb-create-indexes ${hosts:mongodb}:${ports:mongodb} ${buildout:directory}/config/mongodb.indexes

[rabbitmq]
recipe = rod.recipe.rabbitmq
url = ${downloads:rabbitmq}

## NGINX - build program and its module dependencies, and generate configuration
[headers-module]
recipe = hexagonit.recipe.download
url = ${downloads:headers-module}
strip-top-level-dir = true
ignore-existing = true

[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/nginx.conf.template
output = ${buildout:directory}/config/nginx.conf
enable-ssl = false
certificate = ssl/localhost.crt
certificate-key = ssl/localhost.key

[enable-ssl]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = ${buildout:directory}/config/scripts/enable-ssl ${nginx-config:enable-ssl}

[nginx]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
configure-options =
    --with-http_stub_status_module
    --with-http_ssl_module
    --add-module=${buildout:directory}/parts/headers-module
    --conf-path=${buildout:directory}/config/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/nginx-error.log
    --pid-path=${buildout:directory}/var/nginx.pid
    --lock-path=${buildout:directory}/var/nginx.lock

## End NGINX


[node]
recipe = gp.recipe.node
npms = socket.io mongoose express coffee-script redis node-inspector
scripts = coffee node-inspector
instances = 1

[redis]
version = 2.6.13
recipe = hexagonit.recipe.cmmi
url = http://redis.googlecode.com/files/redis-${redis:version}.tar.gz
configure-command = echo No configure for redis
make-targets =
keep-compile-dir = true

[redis_move]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
       mv ${redis:compile-directory}/redis-${redis:version} ${redis:location}
       rm -rf ${redis:compile-directory}
       rm ${buildout:directory}/bin/redis
       echo "#!/bin/sh" >> ${buildout:directory}/bin/redis
       echo "${redis:location}/redis-${redis:version}/src/redis-server $1" >> ${buildout:directory}/bin/redis
       chmod +x ${buildout:directory}/bin/redis

## Generate WSGI Ini files and misc. configuration files

[max-ini]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/max.ini.template
output = ${buildout:directory}/config/max.ini

[bigmax-ini]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/bigmax.ini.template
output = ${buildout:directory}/config/bigmax.ini

[maxtalk-ini]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/maxtalk.ini.template
output = ${buildout:directory}/config/maxtalk.ini

[redis-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/redis.conf.template
output = ${buildout:directory}/config/redis.conf

[node-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/config.js.template
output = ${buildout:directory}/config/config.js

[maxsettings]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/max_settings.template
output = ${buildout:directory}/.max_settings

[osiris-ini]
recipe = collective.recipe.template
input = ${buildout:directory}/config/templates/osiris.ini.template
output = ${buildout:directory}/config/osiris.ini

## End WSGI Ini files

[supervisor]
recipe = collective.recipe.supervisor
port = 9101
user = admin
password = admin
serverurl = http://localhost:9101
programs =
    10 mongodb ${buildout:directory}/bin/mongod [--port ${ports:mongodb} --dbpath ${buildout:directory}/var/data --master --logpath ${buildout:directory}/var/log/mongodb.log --directoryperdb --rest] true
#    10 rabbitmq ${buildout:directory}/bin/rabbitmq-server true
#    15 celery ${buildout:directory}/bin/celeryd [--config=maxrules.config --loglevel=INFO] true
    20 max ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/config/max.ini --timeout ${gunicorn:timeout} --workers ${gunicorn:workers} --max-requests ${gunicorn:max-requests} --worker-class gevent] true
    20 bigmax ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/config/bigmax.ini --timeout ${gunicorn:timeout} --workers ${gunicorn:workers} --max-requests ${gunicorn:max-requests} --worker-class gevent] true
    20 maxrules (autostart=false) ${buildout:directory}/bin/maxrules.twitter [--twitter-username ${twitter:username} --twitter-password ${twitter:password} --mongodb-url mongodb://localhost --mongodb-name max] true
#    20 maxtalk ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/config/maxtalk.ini] true
    20 redis ${buildout:directory}/bin/redis [${buildout:directory}/config/redis.conf] true
    30 maxtalk ${buildout:directory}/bin/node [${buildout:directory}/src/maxtalk.node/server.js] true
    40 nginx ${nginx:location}/sbin/nginx [-c ${buildout:directory}/config/nginx.conf]
    40 osiris ${buildout:directory}/bin/gunicorn_paster [${buildout:directory}/config/osiris.ini --timeout ${osiris:timeout} --workers ${osiris:workers} --max-requests ${osiris:max-requests} --worker-class gevent] true

[omelette]
recipe = collective.recipe.omelette
eggs = ${pyramid:eggs}

[osiris]
ldap = false
workers = 1
max-requests = 1000
timeout = 300
